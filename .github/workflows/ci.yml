
name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, new-random ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ${{matrix.os}}
    container:
      image: ${{matrix.cfg.container}}

    strategy:
      matrix:
        os: [ubuntu-latest]
        cfg:
          - { container: "containers.common-lisp.net/cl-docker-images/sbcl:latest", lisp: sbcl }
          - { container: "containers.common-lisp.net/cl-docker-images/ccl:latest", lisp: ccl }

        # test:
        #   - ARITY-TEST::ALL-SHOP3-INTERNAL-TESTS
        #   - PROTECTION-TEST::PROTECTION-TEST
        #   - SHOP-REPLAN-TESTS::TEST-PLAN-REPAIR
        #   - SHOP-THEOREM-PROVER-TESTS::THEOREM-PROVER-TESTS
        #   - SHOP3-OPENSTACKS::PLAN-OPENSTACKS
        #   - SHOP3-OPENSTACKS::TEST-OPENSTACKS-ADL
        #   - SHOP3-OPENSTACKS::TEST-OPENSTACKS-ADL-explicit-stack-search
        #   - SHOP3-USER::BLOCKS-TESTS
        #   - SHOP3-USER::ENHANCED-PLAN-TREE
        #   - SHOP3-USER::LOGISTICS-TESTS
        #   - SHOP3-USER::LOGISTICS-TESTS-DH
        #   - SHOP3-USER::MINIMAL-SUBTREE-TESTS
        #   - SHOP3-USER::MISC-TESTS
        #   - SHOP3-USER::SINGLETON-TESTS
        #   - SHOP3-USER::UMT-DOMAIN-TESTS
        #   - SHOP3::ROVERS-TESTS
        #   - SHOP3::SHORT-PDDL-TESTS
        #   - SHOP3-USER::DEPOT-TESTS
        #   - TEST-STATES::TEST-SHOP-STATES

    steps:
    - name: Get validate deps
      shell: bash
      run: |
        apt-get update
        apt-get install -y cmake make g++ flex bison

    - uses: actions/checkout@v3

    - name: Checkout submodules
      shell: bash
      run: |
        git submodule update --init --recursive

    - name: cache validate
      id: cache-validate
      uses: actions/cache@v3
      with:
        path: jenkins/VAL
        key: ${{ runner.os }}

    - name: compile validate
      if: steps.cache-validate.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd jenkins/VAL
        make

    - name: add validate to path
      run: echo "${GITHUB_WORKSPACE}/jenkins/VAL" >> $GITHUB_PATH

    - name: tests
      shell: bash
      run: |
        cd jenkins
        ./run-tests.sh ${{ matrix.cfg.lisp }}
    # - name: tests
    #   shell: bash
    #   run: |
    #     ros --no-quicklisp -e "(cl:in-package :cl-user)
    #        (require :asdf)
    #        (prin1 (lisp-implementation-type)) (terpri) (prin1 (lisp-implementation-version)) (terpri)
    #        (princ (uiop:run-program \"date\" :output :string))
    #        (prin1 \"${{ matrix.test }}\") (terpri)
    #        (asdf:initialize-source-registry  '(:source-registry (:directory \"$PWD/shop3/\") (:tree \"$PWD/jenkins/ext/\") :inherit-configuration))
    #        (declaim (optimize (speed 3)))
    #        (asdf:load-system :shop3/test)
    #        (defun test-fail-p (test-result)
    #          (typecase test-result
    #            (fiveam::test-passed nil)
    #            (fiveam::test-failure t)
    #            (null t)
    #            (list (find-if (function (lambda (x) (test-fail-p x))) test-result))
    #            (t nil)))
    #        (let ((test-results (fiveam:run! (quote ${{ matrix.test }}))))
    #            (format t \"Test results are:~%\")
    #            (princ test-results) (terpri)
    #            (princ (uiop:run-program \"date\" :output :string))
    #            (uiop:quit (if (test-fail-p test-results) 1 0)))"
